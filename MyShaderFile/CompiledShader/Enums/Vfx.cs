using System.Collections.Generic;

namespace MyShaderFile.CompiledShader;

public static class Vfx
{
    public enum Type
    {
        Void = 0,
        Float = 1,
        Float2 = 2,
        Float3 = 3,
        Float4 = 4,
        Int = 5,
        Int2 = 6,
        Int3 = 7,
        Int4 = 8,
        Bool = 9,
        Bool2 = 10,
        Bool3 = 11,
        Bool4 = 12,
        Sampler1D = 13,
        Sampler2D = 14,
        Sampler3D = 15,
        SamplerCube = 16,
        Float3x3 = 17,
        Float4x3 = 18,
        Float4x4 = 19,
        Struct = 20,
        Cbuffer = 21,
        SamplerCubeArray = 22,
        Sampler2DArray = 23,
        Buffer = 24,
        Sampler1DArray = 25,
        Sampler3DArray = 26,
        StructuredBuffer = 27,
        ByteAddressBuffer = 28,
        RWBuffer = 29,
        RWTexture1D = 30,
        RWTexture1DArray = 31,
        RWTexture2D = 32,
        RWTexture2DArray = 33,
        RWTexture3D = 34,
        RWStructuredBuffer = 35,
        RWByteAddressBuffer = 36,
        AppendStructuredBuffer = 37,
        ConsumeStructuredBuffer = 38,
        RWStructuredBufferWithCounter = 39,
        ExternalDescriptorSet = 40,
        String = 41,
        SamplerStateIndex = 42,
        Texture2DIndex = 43,
        Texture3DIndex = 44,
        TextureCubeIndex = 45,
        Texture2DArrayIndex = 46,
        TextureCubeArrayIndex = 47,
    }

    private static readonly Dictionary<Type, string> TypeToString = new()
    {
        {Type.Void, "void"},
        {Type.Float, "float"},
        {Type.Float2, "float2"},
        {Type.Float3, "float3"},
        {Type.Float4, "float4"},
        {Type.Int, "int"},
        {Type.Int2, "int2"},
        {Type.Int3, "int3"},
        {Type.Int4, "int4"},
        {Type.Bool, "bool"},
        {Type.Bool2, "bool2"},
        {Type.Bool3, "bool3"},
        {Type.Bool4, "bool4"},
        {Type.Sampler1D, "Sampler1D"},
        {Type.Sampler2D, "Sampler2D"},
        {Type.Sampler3D, "Sampler3D"},
        {Type.SamplerCube, "SamplerCube"},
        {Type.Float3x3, "float3x3"},
        {Type.Float4x3, "float4x3"},
        {Type.Float4x4, "float4x4"},
        {Type.Struct, "struct"},
        {Type.Cbuffer, "cbuffer"},
        {Type.SamplerCubeArray, "SamplerCube[]"},
        {Type.Sampler2DArray, "Sampler2D[]"},
        {Type.Buffer, "buffer"},
        {Type.Sampler1DArray, "Sampler1D[]"},
        {Type.Sampler3DArray, "Sampler3D[]"},
        {Type.StructuredBuffer, "StructuredBuffer"},
        {Type.ByteAddressBuffer, "ByteAddressBuffer"},
        {Type.RWBuffer, "RWBuffer<float4>"},
        {Type.RWTexture1D, "RWTexture1D<float4>"},
        {Type.RWTexture1DArray, "RWTexture1D<float4>[]"},
        {Type.RWTexture2D, "RWTexture2D<float4>"},
        {Type.RWTexture2DArray, "RWTexture2D<float4>[]"},
        {Type.RWTexture3D, "RWTexture3D<float4>"},
        {Type.RWStructuredBuffer, "RWStructuredBuffer"},
        {Type.RWByteAddressBuffer, "RWByteAddressBuffer"},
        {Type.AppendStructuredBuffer, "AppendStructuredBuffer"},
        {Type.ConsumeStructuredBuffer, "ConsumeStructuredBuffer"},
        {Type.RWStructuredBufferWithCounter, "RWStructuredBufferWithCounter"},
        {Type.ExternalDescriptorSet, "ExternalDescriptorSet"},
        {Type.String, "string"},
        {Type.SamplerStateIndex, "SamplerStateIndex"},
        {Type.Texture2DIndex, "Texture2DIndex"},
        {Type.Texture3DIndex, "Texture3DIndex"},
        {Type.TextureCubeIndex, "TextureCubeIndex"},
        {Type.Texture2DArrayIndex, "Texture2DArrayIndex"},
        {Type.TextureCubeArrayIndex, "TextureCubeArrayIndex"},
    };

    public static string GetTypeName(Type type)
    {
        return TypeToString.GetValueOrDefault(type, $"UnknownType{type}");
    }
}
